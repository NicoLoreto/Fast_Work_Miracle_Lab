basePath: null
definitions:
    IProfessionalUser:
        description: ""
        properties:
            id:
                type: number
                format: double
                description: ""
            email:
                type: string
                description: ""
            password:
                type: string
                description: ""
            name:
                type: string
                description: ""
            last_name:
                type: string
                description: ""
            dni:
                type: string
                description: ""
            province:
                type: string
                description: ""
            city:
                type: string
                description: ""
            tel:
                type: string
                description: ""
            link:
                type: string
                description: ""
            about_me:
                type: string
                description: ""
            gender:
                enum:
                    - Male
                    - Female
                    - Non-binary
                type: string
                description: ""
            birth_date:
                type: string
                description: ""
            auth_number:
                type: string
                description: ""
            img:
                type: string
                description: ""
            category_id:
                type: string
                description: ""
            state:
                type: number
                format: double
                description: ""
        type: object
        required:
            - email
            - name
            - last_name
            - dni
            - province
            - city
            - tel
            - gender
            - birth_date
    ICategory:
        description: ""
        properties:
            id:
                type: number
                format: double
                description: ""
            name:
                type: string
                description: ""
        type: object
        required:
            - name
info:
    description: 'FastWork API.'
    license:
        name: ISC
    title: fastwork-api
    version: 1.0.0
paths:
    /api/auth/signup:
        post:
            operationId: AuthPost
            produces:
                - text/html
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
                '201':
                    description: 'Created user'
                    schema:
                        type: string
                '400':
                    description: 'Bad request'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: ""
            tags:
                - AuthUser
            consumes:
                - application/json
            parameters:
                -
                    description: "   * This is an endpoint to register as a professional user.\r\n\r\n  Example:\r\n\r\n     \"email\": \"juan@gmail.com\",\r\n     \"password\": \"12345678\",\r\n     \"name\": \"Juan\",\r\n     \"last_name\": \"Lopez\",\r\n     \"dni\": \"34614738\",\r\n     \"province\": \"Santa Fe\",\r\n     \"city\": \"Rosario\",\r\n     \"tel\": \"2477434454\",\r\n     \"link\": \"hi-world.com.ar\",\r\n     \"about_me\": \"Experienced carpenter skilled in crafting wood into functional and artistic pieces. Dedicated to transforming ideas into tangible, quality creations.\",\r\n     \"gender\": \"Male\",\r\n     \"birth_date\": \"1990-01-03\",\r\n     \"auth_number\": \"12312da134123QWw\",\r\n     \"img\": \"photo.png\",\r\n     \"category_id\": \"3\""
                    in: body
                    name: authUser
                    required: true
                    schema:
                        $ref: '#/definitions/IProfessionalUser'
    /api/auth/login:
        post:
            operationId: AuthLogin
            produces:
                - text/html
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
                '401':
                    description: 'Invalid credentials'
                    schema:
                        type: string
                '403':
                    description: 'Disabled account'
                    schema:
                        type: string
                '404':
                    description: 'The user does not exist in the database'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: ""
            tags:
                - AuthUser
            consumes:
                - application/json
            parameters:
                -
                    description: "  * This is an endpoint to login as a professional user. The user will receive an authentication\r\n    token to be validated when making requests.\r\n\r\n  Example:\r\n\r\n     \"email\": \"juan@gmail.com\",\r\n     \"password\": \"12345678\""
                    in: body
                    name: authUser
                    required: true
                    schema:
                        $ref: '#/definitions/IProfessionalUser'
    /api/categories/:
        get:
            operationId: CategoryGet
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: Success
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/ICategory'
                '404':
                    description: 'There are not categories'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: "\r\n* This endpoint returns all categories added by an administrator."
            tags:
                - Categories
            parameters: []
        post:
            operationId: CategoryPost
            produces:
                - text/html
            responses:
                '201':
                    description: 'Created category'
                    schema:
                        type: string
                '204':
                    description: 'No content'
                '400':
                    description: 'Bad request'
                    schema:
                        type: string
                '409':
                    description: 'The category is already exists'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: ""
            tags:
                - Categories
            consumes:
                - application/json
            parameters:
                -
                    description: " * This endpoint is implemented to add categories. It will be security so that only an administrator user can add categories. Does not apply to the current MVP. \r\n\r\n Example:\r\n  \r\n     \"name\": \"Cerrajero\""
                    in: body
                    name: category
                    required: true
                    schema:
                        $ref: '#/definitions/ICategory'
    /api/professional_user:
        get:
            operationId: ProfessionalUserGet
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: Success
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/IProfessionalUser'
                '404':
                    description: 'There are no registered users'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: ""
            tags:
                - 'Professional Users'
            parameters: []
        put:
            operationId: ProfessionalUserEditUser
            produces:
                - text/html
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: ""
            tags:
                - 'Professional Users'
            security:
                -
                    default:
                        - x-auth
            consumes:
                - application/json
            parameters:
                -
                    description: "  * This endpoint is for editing an account by an authenticated professional user.\r\n\r\n  Example: \r\n\r\n     \"name\": \"Juan Pedro\",\r\n     \"last_name\": \"Lopez\",\r\n     \"dni\": \"34614738\",\r\n     \"province\": \"Santa Fe\",\r\n     \"city\": \"Franck\",\r\n     \"tel\": \"0341434454\",\r\n     \"link\": \"hi-world.com.ar\",\r\n     \"about_me\": \"Experienced carpenter skilled in crafting wood into functional and artistic pieces. Dedicated to transforming ideas into tangible, quality creations.\",\r\n     \"gender\": \"Male\",\r\n     \"birth_date\": \"1990-01-03\",\r\n     \"auth_number\": \"12312da134123QWw\",\r\n     \"img\": \"photo.png\",\r\n     \"category_id\": \"3\""
                    in: body
                    name: professionalUser
                    required: true
                    schema:
                        $ref: '#/definitions/IProfessionalUser'
        delete:
            operationId: ProfessionalUserDelete
            produces:
                - text/html
            responses:
                '204':
                    description: ""
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: '* This endpoint is for remove a professional user when he is authenticated. It is removed from the database.'
            tags:
                - 'Professional Users'
            security:
                -
                    default:
                        - x-auth
            parameters: []
    '/api/professional_user/{id}':
        get:
            operationId: ProfessionalUserGetById
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: Success
                    schema:
                        $ref: '#/definitions/IProfessionalUser'
                '500':
                    description: 'Unable to retrieve the entity'
                    schema:
                        type: string
            description: ""
            tags:
                - 'Professional Users'
            parameters:
                -
                    description: '* This endpoint returns an professional user by id.'
                    in: path
                    name: id
                    required: true
                    type: number
                    format: double
    '/api/professional_user/category/{category_id}':
        get:
            operationId: ProfessionalUserGetByCategory
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: Success
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/IProfessionalUser'
                '404':
                    description: 'There are no professional users registered with that category'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: ""
            tags:
                - 'Professional Users'
            parameters:
                -
                    description: '* This endpoint returns all registered professional users by trade category to which they belong.'
                    in: path
                    name: category_id
                    required: true
                    type: number
                    format: double
    /api/professional_user/disable:
        delete:
            operationId: ProfessionalUserDisableAccount
            produces:
                - text/html
            responses:
                '200':
                    description: 'The account has been disabled'
                    schema:
                        type: string
                '500':
                    description: 'Server error'
                    schema:
                        type: string
            description: '* This endpoint is for disable a professional user when he is authenticated. It is not removed from the database, it changes its state to false.'
            tags:
                - 'Professional Users'
            security:
                -
                    default:
                        - x-auth
            parameters: []
swagger: '2.0'
securityDefinitions:
    default:
        type: apiKey
        name: x-auth
        in: header
